import React, { useState } from 'react';
import { useDrag, useDrop } from 'react-dnd';
import { AiOutlinePaperClip } from 'react-icons/ai';
import { MdDragIndicator } from 'react-icons/md';
import { ItemTypes } from './types';

type ColumnItemProps = {
    children: JSX.Element;
    draggable: boolean;
    id: string;
    text: string;
    findItem: (id: string) => { index: number };
    moveItem: (id: string, to: number) => void;
};

interface Item {
    id: string;
    originalIndex: number;
}

const tags = [
    { id: 1, name: 'None', value: null },
    { id: 2, name: 'Urgent', value: 'urgent' },
];

const dueDates = [
    { name: 'No due date', value: null },
    { name: 'Today', value: 'today' },
];

const ColumnItem = ({ id, ...props }: ColumnItemProps) => {
    const [tagged, setTagged] = useState(tags[0]);
    const [dated, setDated] = useState(dueDates[0]);

    const originalIndex = props.findItem(id).index;
    const [{ isDragging }, drag, preview] = useDrag(
        () => ({
            type: ItemTypes.LIST_ITEM,
            item: { id, originalIndex },
            collect: (monitor) => ({ isDragging: monitor.isDragging() }),
            end: (item, monitor) => {
                const { id: droppedId, originalIndex } = item;
                const didDrop = monitor.didDrop();
                if (!didDrop) {
                    props.moveItem(droppedId, originalIndex);
                }
            },
        }),
        [id, originalIndex, props.moveItem]
    );

    const [, drop] = useDrop(
        () => ({
            accept: ItemTypes.LIST_ITEM,
            hover({ id: draggedId }: Item) {
                if (draggedId !== id) {
                    const { index: overIndex } = props.findItem(id);
                    props.moveItem(draggedId, overIndex);
                }
            },
        }),
        [props.findItem, props.moveItem]
    );

    const opacity = isDragging ? 0 : 0.9;

    return (
        <li
            // ref={preview}
            ref={(node) => drag(drop(node))}
            style={{ opacity: opacity }}
            className="p-2"
        >
            <form action="#" className="relative">
                <div className="p-2 border border-gray-300 rounded-lg shadow-sm bg-gray-50 overflow-hidden focus-within:border-indigo-500 focus-within:ring-1 focus-within:ring-slate-500">
                    <label htmlFor="title" className="sr-only">
                        Title
                    </label>
                    <div className="flex flex-row items-center">
                        <input
                            type="text"
                            name="title"
                            id="title"
                            className="block w-full border-0 pt-2.5 text-lg font-medium text-slate-800 bg-gray-50 placeholder-gray-500 focus:outline-none"
                            placeholder="Title"
                        />
                        <div
                            className="block p-2 text-gray-500 cursor-move focus:cursor-move"
                            // ref={(node) => drag(drop(node))}
                            // ref={drag}
                        >
                            <MdDragIndicator />
                        </div>
                    </div>

                    <div className="flex"></div>
                    <label htmlFor="description" className="sr-only">
                        Description
                    </label>
                    <textarea
                        rows={2}
                        name="description"
                        id="description"
                        className="block w-full border-0 py-2 resize-none bg-gray-50 placeholder-gray-500 focus:ring-0 sm:text-md focus:outline-none"
                        placeholder="Write a description..."
                        defaultValue={''}
                    />
                    {/* Spacer Element, show on focused */}
                    <div aria-hidden="true">
                        <div className="py-1">
                            <div className="h-3" />
                        </div>
                        <div className="h-px" />
                        <div className="py-1">
                            <div className="py-px">
                                <div className="h-3" />
                            </div>
                        </div>
                    </div>

                    <div className="border-t border-gray-200 px-2 py-2 flex justify-between items-center space-x-3 sm:px-3">
                        <div className="flex">
                            <button
                                type="button"
                                className="-ml-2 -my-2 rounded-full px-3 py-2 inline-flex items-center text-left text-gray-400 group"
                            >
                                <AiOutlinePaperClip
                                    className="-ml-1 h-5 w-5 mr-2 group-hover:text-gray-500"
                                    aria-hidden="true"
                                />
                                <span className="text-sm text-gray-500 group-hover:text-gray-600 italic">
                                    Attach a file
                                </span>
                            </button>
                        </div>
                        <div className="flex-shrink-0">
                            <button
                                type="submit"
                                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-bg/[0.8] hover:bg-primary-bg hover:drop-shadow focus:outline-none focus:drop-shadow-lg transition-colors duration-300"
                            >
                                Create
                            </button>
                        </div>
                    </div>

                    {/* <div
                    ref={(node) => drag(drop(node))}
                    className="w-10 h-10 rounded-lg bg-gray-500 cursor-move focus:cursor-move"
                ></div> */}
                    {props.children}
                </div>
            </form>
        </li>
    );
};

export default ColumnItem;





import React, { useRef, useState, useCallback, useMemo } from 'react';
import Button from '@/components/elements/Button';
import update from 'immutability-helper';
import { useUIContext } from '@/contexts/UIContextProvider';
import ColumnItem from './ColumnItem';
import { Task } from './types';
import { generateRandomString } from '@/core/utils/functions';
import { ItemTypes } from './types';
import { useDrop } from 'react-dnd';

type ColumnProps = {
    children?: JSX.Element;
    currentTaskID?: string;
    tasks?: Task[];
    draggable?: boolean;
    index?: number;
    onDragStart?: Function;
    onDrop?: Function;
};

interface ColumnState {
    items: any[];
}

const ITEMS = [
    {
        id: 1,
        text: 'Write a cool JS library',
    },
    {
        id: 2,
        text: 'Make it generic enough',
    },
    {
        id: 3,
        text: 'Write README',
    },
    // {
    //     id: 4,
    //     text: 'Create some examples',
    // },
    // {
    //     id: 5,
    //     text: 'Spam in Twitter and IRC to promote it',
    // },
    // {
    //     id: 6,
    //     text: '???',
    // },
    // {
    //     id: 7,
    //     text: 'PROFIT',
    // },
];

const Column = (props: ColumnProps) => {
    const [items, setItems] = useState(ITEMS);
    const findItem = useCallback(
        (id: string) => {
            const item = items.filter((c) => `${c.id}` === id)[0] as {
                id: number;
                text: string;
            };
            return {
                item,
                index: items.indexOf(item),
            };
        },
        [items]
    );
    const moveItem = useCallback(
        (id: string, atIndex: number) => {
            const { item, index } = findItem(id);
            setItems(
                update(items, {
                    $splice: [
                        [index, 1],
                        [atIndex, 0, item],
                    ],
                })
            );
        },
        [findItem, items, setItems]
    );

    const [, drop] = useDrop(() => ({ accept: ItemTypes.LIST_ITEM }));

    // https://tailwindui.com/components/application-ui/forms/textareas
    return (
        <div className="container">
            <div className="flex flex-row justify-between gap-x-5 h-auto">
                <div className="flex flex-col p-2 w-full rounded-md bg-[#FDF5DF] dark:bg-secondary-dark-bg shadow-md">
                    <ul ref={drop} className="w-full">
                        {items.map((item) => (
                            <div key={item.id}>
                                <ColumnItem
                                    key={item.id}
                                    id={`${item.id}`}
                                    moveItem={moveItem}
                                    findItem={findItem}
                                    draggable={true}
                                />
                            </div>
                        ))}
                    </ul>
                    <Button
                        backgroundColor={`#FFFFFF00`}
                        buttonStyling="flex justify-center rounded-md cursor-pointer items-center bg-inherit"
                        // onClick={handleAddCheckListItem}
                    >
                        <div className="items-center">
                            <span className="text-2xl">+</span>
                        </div>
                    </Button>
                </div>

                {/* <div className="flex flex-col w-full p-2 rounded-md bg-slate-100 shadow-md">
                    <ul>
                        <Draggable axis="y" bounds="parent">
                            <div className="p-2">
                                <CheckListItem>
                                    <span></span>
                                </CheckListItem>
                            </div>
                        </Draggable>
                    </ul>
                </div>
                <div className="flex flex-col w-full p-2 rounded-md bg-slate-100 shadow-md">
                    <ul>
                        <Draggable axis="y">
                            <div className="p-2">
                                <CheckListItem>
                                    <span></span>
                                </CheckListItem>
                            </div>
                        </Draggable>
                    </ul>
                </div> */}
            </div>
        </div>
    );
};

export default Column;

